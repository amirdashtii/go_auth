// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// InMemoryRespositoryContracts is an autogenerated mock type for the InMemoryRespositoryContracts type
type InMemoryRespositoryContracts struct {
	mock.Mock
}

// AddToken provides a mock function with given fields: userID, token, expiration
func (_m *InMemoryRespositoryContracts) AddToken(userID string, token string, expiration time.Duration) error {
	ret := _m.Called(userID, token, expiration)

	if len(ret) == 0 {
		panic("no return value specified for AddToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) error); ok {
		r0 = rf(userID, token, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindToken provides a mock function with given fields: userID
func (_m *InMemoryRespositoryContracts) FindToken(userID string) (string, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for FindToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveToken provides a mock function with given fields: userID
func (_m *InMemoryRespositoryContracts) RemoveToken(userID string) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewInMemoryRespositoryContracts creates a new instance of InMemoryRespositoryContracts. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInMemoryRespositoryContracts(t interface {
	mock.TestingT
	Cleanup(func())
}) *InMemoryRespositoryContracts {
	mock := &InMemoryRespositoryContracts{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

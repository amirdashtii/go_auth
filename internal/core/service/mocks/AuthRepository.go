// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amirdashtii/go_auth/internal/core/entities"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

type MockAuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthRepository) EXPECT() *MockAuthRepository_Expecter {
	return &MockAuthRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type AuthRepository
func (_mock *AuthRepository) Create(ctx context.Context, user *entities.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAuthRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockAuthRepository_Expecter) Create(ctx interface{}, user interface{}) *MockAuthRepository_Create_Call {
	return &MockAuthRepository_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *MockAuthRepository_Create_Call) Run(run func(ctx context.Context, user *entities.User)) *MockAuthRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.User))
	})
	return _c
}

func (_c *MockAuthRepository_Create_Call) Return(err error) *MockAuthRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthRepository_Create_Call) RunAndReturn(run func(ctx context.Context, user *entities.User) error) *MockAuthRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByID provides a mock function for the type AuthRepository
func (_mock *AuthRepository) FindUserByID(ctx context.Context, id uuid.UUID) (*entities.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByID")
	}

	var r0 *entities.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entities.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_FindUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByID'
type MockAuthRepository_FindUserByID_Call struct {
	*mock.Call
}

// FindUserByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockAuthRepository_Expecter) FindUserByID(ctx interface{}, id interface{}) *MockAuthRepository_FindUserByID_Call {
	return &MockAuthRepository_FindUserByID_Call{Call: _e.mock.On("FindUserByID", ctx, id)}
}

func (_c *MockAuthRepository_FindUserByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockAuthRepository_FindUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthRepository_FindUserByID_Call) Return(user *entities.User, err error) *MockAuthRepository_FindUserByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockAuthRepository_FindUserByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*entities.User, error)) *MockAuthRepository_FindUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByPhoneNumber provides a mock function for the type AuthRepository
func (_mock *AuthRepository) FindUserByPhoneNumber(ctx context.Context, phoneNumber *string) (*entities.User, error) {
	ret := _mock.Called(ctx, phoneNumber)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByPhoneNumber")
	}

	var r0 *entities.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string) (*entities.User, error)); ok {
		return returnFunc(ctx, phoneNumber)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string) *entities.User); ok {
		r0 = returnFunc(ctx, phoneNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = returnFunc(ctx, phoneNumber)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_FindUserByPhoneNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByPhoneNumber'
type MockAuthRepository_FindUserByPhoneNumber_Call struct {
	*mock.Call
}

// FindUserByPhoneNumber is a helper method to define mock.On call
//   - ctx
//   - phoneNumber
func (_e *MockAuthRepository_Expecter) FindUserByPhoneNumber(ctx interface{}, phoneNumber interface{}) *MockAuthRepository_FindUserByPhoneNumber_Call {
	return &MockAuthRepository_FindUserByPhoneNumber_Call{Call: _e.mock.On("FindUserByPhoneNumber", ctx, phoneNumber)}
}

func (_c *MockAuthRepository_FindUserByPhoneNumber_Call) Run(run func(ctx context.Context, phoneNumber *string)) *MockAuthRepository_FindUserByPhoneNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*string))
	})
	return _c
}

func (_c *MockAuthRepository_FindUserByPhoneNumber_Call) Return(user *entities.User, err error) *MockAuthRepository_FindUserByPhoneNumber_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockAuthRepository_FindUserByPhoneNumber_Call) RunAndReturn(run func(ctx context.Context, phoneNumber *string) (*entities.User, error)) *MockAuthRepository_FindUserByPhoneNumber_Call {
	_c.Call.Return(run)
	return _c
}

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entities "github.com/amirdashtii/go_auth/internal/core/entities"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *AuthRepository) Create(user *entities.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUserByID provides a mock function with given fields: id
func (_m *AuthRepository) FindUserByID(id uuid.UUID) (*entities.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByID")
	}

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*entities.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *entities.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByPhoneNumber provides a mock function with given fields: phoneNumber
func (_m *AuthRepository) FindUserByPhoneNumber(phoneNumber *string) (*entities.User, error) {
	ret := _m.Called(phoneNumber)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByPhoneNumber")
	}

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) (*entities.User, error)); ok {
		return rf(phoneNumber)
	}
	if rf, ok := ret.Get(0).(func(*string) *entities.User); ok {
		r0 = rf(phoneNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(phoneNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
